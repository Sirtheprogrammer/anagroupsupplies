import { collection, getDocs, query, where } from 'firebase/firestore';
import { db } from '../firebase/config';
import { Link } from 'react-router-dom';
import { toast } from 'react-toastify';
import { useState, useEffect, useRef } from 'react';
import { motion } from 'framer-motion';
import {
  ShoppingBagIcon,
  TagIcon,
  GiftIcon,
  SparklesIcon,
} from '@heroicons/react/24/outline';

const iconMap = {
  Jerseys: ShoppingBagIcon,
  Trousers: TagIcon,
  'T-Shirts': ShoppingBagIcon,
  Sandals: GiftIcon,
  Shoes: GiftIcon,
  Others: SparklesIcon,
};

const Home = () => {
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loadingProducts, setLoadingProducts] = useState(true);
  const [loadingCategories, setLoadingCategories] = useState(true);
  const [error, setError] = useState('');
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);
  const [showHero, setShowHero] = useState(true);
  const heroTimeoutRef = useRef(null);

  // Add window resize listener
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // Hide hero section after 5 seconds
  useEffect(() => {
    heroTimeoutRef.current = setTimeout(() => {
      setShowHero(false);
    }, 5000);

    return () => {
      if (heroTimeoutRef.current) {
        clearTimeout(heroTimeoutRef.current);
      }
    };
  }, []);

  useEffect(() => {
    const fetchProducts = async () => {
      setLoadingProducts(true);
      try {
        let q = collection(db, 'products');

        if (selectedCategory) {
          q = query(q, where('category', '==', selectedCategory));
        }

        const querySnapshot = await getDocs(q);
        const productsList = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));

        // Sort products by creation date on the client side
        productsList.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        
        setProducts(productsList);
        setError('');
      } catch (error) {
        console.error('Error fetching products:', error);
        setError(error.message);
        toast.error('Failed to load products. Please try again later.');
      } finally {
        setLoadingProducts(false);
      }
    };

    fetchProducts();
  }, [selectedCategory]);

  useEffect(() => {
    const fetchCategories = async () => {
      setLoadingCategories(true);
      try {
        const querySnapshot = await getDocs(collection(db, 'categories'));
        const categoriesList = querySnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        setCategories(categoriesList);
      } catch (error) {
        console.error('Error fetching categories:', error);
      } finally {
        setLoadingCategories(false);
      }
    };

    fetchCategories();
  }, []);

  const handleCategoryClick = (categoryId) => {
    setSelectedCategory(categoryId);
  };

  if (loadingProducts || loadingCategories) {
    return (
      <div className="min-h-screen w-full max-w-[1920px] mx-auto flex items-center justify-center bg-gradient-to-b from-background to-surface dark:from-background-dark dark:to-surface-dark fixed inset-0 z-50">
        <div className="text-center relative">
          <div className="relative h-16 w-16 mx-auto">
            <div className="absolute animate-ping h-full w-full rounded-full bg-primary opacity-20"></div>
            <div className="absolute animate-spin h-full w-full rounded-full border-4 border-t-primary border-r-secondary border-b-accent border-l-transparent"></div>
            <div className="absolute inset-0 flex items-center justify-center">
              <svg className="w-8 h-8 text-primary animate-bounce" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
              </svg>
            </div>
          </div>
          <div className="mt-6 relative">
            <p className="text-lg font-medium animate-pulse">
              <span className="bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
                Loading amazing products...
              </span>
            </p>
            <div className="mt-2 text-sm text-gray-500 dark:text-gray-400">Please wait a moment</div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center text-red-600">
          <h2 className="text-2xl font-bold mb-2">Error Loading Data</h2>
          <p>{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="mt-4 px-6 py-2 bg-gradient-to-r from-primary to-secondary text-white rounded-full hover:shadow-lg transition-all duration-300 hover:scale-105"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full overflow-x-hidden min-h-screen flex flex-col relative">
      <div className="flex-1 w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-16 pb-20">
        {/* Animated Hero Section */}
        {showHero && (
          <section className="relative min-h-[60vh] sm:min-h-[70vh] lg:min-h-[80vh] w-full overflow-hidden">
            {/* Background with parallax effect */}
            <div className="absolute inset-0 bg-gradient-to-br from-primary via-secondary to-accent">
              <div className="absolute inset-0 bg-grid-pattern opacity-30 dark:opacity-20 transform scale-150 rotate-12 animate-float"></div>
              <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent"></div>
            </div>

            {/* Floating shapes */}
            <div className="absolute inset-0 overflow-hidden pointer-events-none">
              <div className="absolute top-1/4 left-1/4 w-32 h-32 bg-white/10 rounded-full blur-2xl animate-blob"></div>
              <div className="absolute top-1/3 right-1/4 w-40 h-40 bg-white/10 rounded-full blur-2xl animate-blob animation-delay-2000"></div>
              <div className="absolute bottom-1/4 left-1/3 w-36 h-36 bg-white/10 rounded-full blur-2xl animate-blob animation-delay-4000"></div>
            </div>

            {/* Content */}
            <div className="relative h-full flex items-center justify-center">
              <div className="text-center px-4 sm:px-6 lg:px-8 max-w-4xl mx-auto pt-20 pb-12">
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.8 }}
                  className="space-y-6"
                >
                  <span className="inline-block text-white/90 text-sm sm:text-base tracking-wider uppercase animate-float">
                    Welcome to
                  </span>
                  <h1 className="text-3xl sm:text-4xl lg:text-6xl font-bold text-white leading-tight">
                    AnA Group Supplies
                  </h1>
                  <p className="text-white/90 text-sm sm:text-base lg:text-lg max-w-2xl mx-auto leading-relaxed">
                    Your Premier Destination for Quality Products at Unbeatable Prices
                  </p>
                  <div className="flex flex-col sm:flex-row items-center justify-center gap-4 mt-8">
                    <Link
                      to="/products"
                      className="group relative inline-flex items-center justify-center px-6 py-3 text-base font-medium text-white bg-transparent overflow-hidden transition-all duration-300"
                    >
                      <span className="absolute inset-0 bg-white/10 rounded-lg backdrop-blur-sm group-hover:bg-white/20 transition-all duration-300"></span>
                      <span className="relative flex items-center">
                        Explore Products
                        <svg className="w-5 h-5 ml-2 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 8l4 4m0 0l-4 4m4-4H3" />
                        </svg>
                      </span>
                    </Link>
                  </div>
                </motion.div>
              </div>
            </div>

            {/* Scroll indicator */}
            <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 animate-bounce">
              <svg className="w-6 h-6 text-white/70" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
              </svg>
            </div>
          </section>
        )}

      {/* Categories Section */}
      <section className="py-8 sm:py-12 lg:py-16">
        <div className="w-full text-center">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="relative">
              <h2 className="text-2xl sm:text-3xl lg:text-4xl font-bold mb-8 text-text dark:text-text-dark inline-block">
                Shop by Category
                <div className="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-primary to-secondary transform scale-x-0 group-hover:scale-x-100 transition-transform duration-300"></div>
              </h2>
            </div>
            
            <div className="relative">
              <div className="flex space-x-3 sm:space-x-4 overflow-x-auto scrollbar-hide snap-x snap-mandatory pb-6 px-2 -mx-2 scroll-smooth">
                <button
                  onClick={() => handleCategoryClick(null)}
                  className={`group snap-start flex flex-col items-center min-w-[100px] sm:min-w-[120px] p-3 rounded-xl backdrop-blur-sm transition-all duration-300 transform hover:-translate-y-1
                    ${selectedCategory === null 
                      ? 'bg-gradient-to-br from-primary to-secondary text-white shadow-lg' 
                      : 'bg-surface/80 dark:bg-surface-dark/80 text-text dark:text-text-dark hover:bg-surface/90 dark:hover:bg-surface-dark/90 shadow-sm hover:shadow-md'
                    }`}
                >
                  <div className={`rounded-full p-3 mb-2 transition-colors duration-300
                    ${selectedCategory === null 
                      ? 'bg-white/20' 
                      : 'bg-primary/10 dark:bg-primary/20 group-hover:bg-primary/20 dark:group-hover:bg-primary/30'
                    }`}>
                    <ShoppingBagIcon className="h-6 w-6" />
                  </div>
                  <span className="text-sm font-medium whitespace-nowrap">All Products</span>
                </button>

                {categories.map((category) => {
                  const IconComponent = iconMap[category.name] || ShoppingBagIcon;
                  return (
                    <button
                      key={category.id}
                      onClick={() => handleCategoryClick(category.id)}
                      className={`group snap-start flex flex-col items-center min-w-[100px] sm:min-w-[120px] p-3 rounded-xl transition-all duration-300 transform hover:-translate-y-1
                        ${selectedCategory === category.id
                          ? 'bg-gradient-to-br from-primary to-secondary text-white shadow-lg' 
                          : 'bg-surface/80 dark:bg-surface-dark/80 text-text dark:text-text-dark hover:bg-surface/90 dark:hover:bg-surface-dark/90 shadow-sm hover:shadow-md'
                        }`}
                    >
                      <div className={`rounded-full p-3 mb-2 transition-colors duration-300
                        ${selectedCategory === category.id
                          ? 'bg-white/20' 
                          : 'bg-primary/10 dark:bg-primary/20 group-hover:bg-primary/20 dark:group-hover:bg-primary/30'
                        }`}>
                        <IconComponent className="h-6 w-6" />
                      </div>
                      <span className="text-sm font-medium whitespace-nowrap">{category.name}</span>
                    </button>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Products Section */}
      <section className="py-8 products-section relative">
        <div className="max-w-7xl mx-auto w-full">
          <h2 className="text-2xl sm:text-3xl font-bold mb-8 text-gray-900 dark:text-white text-center">
            Featured Collections
          </h2>

          {categories.map((category) => {
            const catProducts = products.filter(p => p.category === category.id);
            if (!catProducts || catProducts.length === 0) return null;

            return (
              <div key={category.id} className="mb-12 sm:mb-16">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center space-x-2">
                    <h3 className="text-xl sm:text-2xl font-bold text-text dark:text-text-dark group-hover:text-primary transition-colors duration-300">
                      {category.name}
                    </h3>
                    <div className="h-1 w-8 bg-gradient-to-r from-primary to-secondary rounded-full"></div>
                  </div>
                  <Link
                    to={`/products?category=${category.id}`}
                    className="group flex items-center text-sm text-primary hover:text-primary-dark transition-colors duration-300"
                  >
                    <span>View Collection</span>
                    <svg className="w-4 h-4 ml-1 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </Link>
                </div>

                <div className="relative">
                  {/* Gradient fade edges for scroll indication */}
                  <div className="absolute left-0 top-0 bottom-0 w-8 bg-gradient-to-r from-background to-transparent dark:from-background-dark pointer-events-none z-10"></div>
                  <div className="absolute right-0 top-0 bottom-0 w-8 bg-gradient-to-l from-background to-transparent dark:from-background-dark pointer-events-none z-10"></div>

                  <div className="relative overflow-hidden">
                    <div className="overflow-x-auto scrollbar-hide scroll-smooth pb-4">
                      <div className="flex gap-4 sm:gap-6" style={{ width: 'max-content' }}>
                        {catProducts.slice(0, isMobile ? 4 : 6).map(product => (>
                  {/* Gradient fade edges for scroll indication */}
                  <div className="absolute left-0 top-0 bottom-0 w-8 bg-gradient-to-r from-background to-transparent dark:from-background-dark pointer-events-none z-10"></div>
                  <div className="absolute right-0 top-0 bottom-0 w-8 bg-gradient-to-l from-background to-transparent dark:from-background-dark pointer-events-none z-10"></div>

                  <div className="relative overflow-hidden">
                    <div className="overflow-x-auto scrollbar-hide scroll-smooth pb-4">
                      <div className="flex gap-4 sm:gap-6" style={{ width: 'max-content' }}>
                        {catProducts.slice(0, isMobile ? 4 : 6).map(product => (
                                                {catProducts.slice(0, isMobile ? 4 : 6).map(product => (
                          <div
                            key={product.id}
                            className="group relative w-[180px] sm:w-[220px] lg:w-[260px] h-[280px] sm:h-[320px] bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-xl transition-all duration-300 overflow-hidden flex-shrink-0 backdrop-blur-sm"
                          >
                            <Link to={`/product/${product.id}`} className="block h-full">
                              <div className="relative w-full h-[160px] bg-gray-50 dark:bg-gray-900 overflow-hidden">
                                <img
                                  src={product.image}
                                  alt={product.name}
                                  className="object-contain w-full h-full p-3 transition-all duration-300 group-hover:scale-105"
                                  loading="lazy"
                                  onLoad={(e) => {
                                    e.target.style.opacity = '1';
                                  }}
                                  style={{
                                    opacity: '0',
                                    transition: 'opacity 0.2s ease-out'
                                  }}
                                />
                                {product.stock <= 0 && (
                                  <div className="absolute inset-0 bg-black/60 flex items-center justify-center">
                                    <span className="text-white text-sm font-medium px-3 py-1 bg-red-500/80 rounded-full">
                                      Out of Stock
                                    </span>
                                  </div>
                                )}
                              </div>
                              <div className="p-4 flex flex-col justify-between h-[calc(100%-160px)]">
                                <h4 className="text-sm font-medium text-gray-800 dark:text-gray-200 line-clamp-2 group-hover:text-primary transition-colors duration-300">
                                  {product.name}
                                </h4>
                                <div className="mt-auto">
                                  <div className="flex items-center justify-between">
                                    <div className="flex flex-col">
                                      <span className="text-xs text-gray-500 dark:text-gray-400">Price</span>
                                      <span className="text-primary font-bold text-sm">
                                        TZS {parseFloat(product.price).toLocaleString()}
                                      </span>
                                    </div>
                                    <button
                                      onClick={(e) => { e.preventDefault(); /* add to cart */ }}
                                      disabled={product.stock <= 0}
                                      className={`flex items-center justify-center p-2 rounded-full transition-all duration-300 ${
                                        product.stock > 0
                                          ? 'bg-primary text-white hover:bg-primary-dark hover:shadow-lg hover:shadow-primary/30'
                                          : 'bg-gray-300 dark:bg-gray-600 cursor-not-allowed'
                                      }`}
                                      aria-label={`Add ${product.name} to cart`}
                                    >
                                      <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                      </svg>
                                    </button>
                                  </div>
                                </div>
                              </div>
                            </Link>
                            <div className="absolute inset-0 bg-black/60 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                              <button className="px-4 py-2 bg-white text-primary rounded-full transform -translate-y-4 group-hover:translate-y-0 transition-transform duration-500 hover:bg-gray-100">
                                Quick View
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}

            {products.length === 0 && (
              <div className="text-center text-gray-600 dark:text-gray-400 py-6 md:py-8 px-2">
                No products available yet.
              </div>
            )}
          </div>
        </section>
      </div>
    </div>
  );
};

export default Home;
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            );
          })}

          {/* If no products at all, show fallback */}
          {products.length === 0 && (
            <div className="text-center text-gray-600 dark:text-gray-400 py-6 md:py-8 px-2">
              No products available yet.
            </div>
          )}
        </div>
      </section>
      </div>
    </div>
  );
};

export default Home;